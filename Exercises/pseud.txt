Use getchar() to get input from the user
Locate unbalanced (), [], {}, '', ""
	Needs to search for both opening and closing characters
		If an opening character is found, the program will search for a closing character
		If a closing character is found, that will be an automatic imbalance since it hasn't already been paired by a search for an opening character
	An additional array will be needed to keep track of which characters are paired to eachother, that way none of the characters will have duplicate pairings
	If a closing character is found without a pair, this will be an automatic imbalance
	Since quotes don't have opening or closing chaacters, the program will simply count the program as imbalanced if an uneven count has been found
Ignore imbalances them if they are within escape sequences or comments
	Detect escape sequences by checking if the character has a '\' in front of it
	Use the code from the last exercise with an "inComment" variable to detemine if a character should be ignored
If any imbalance has been found, notify the user that the program contains imbalances.

================================================================================

SIZE = 2000

func main()
	char input[SIZE]
	char pairs[SIZE]
	int length = 0
	int pairCounter = 0
	int inComment = 0
	int imbalanceFound = 0
	int sQuoteCount = 0
	int dQuoteCount = 0

	int i
	for (i = 0; i < SIZE; ++i)
		pairs[i] = 0

	i = 0
	int c
	while ((c = getchar()) != EOF)
		input[i] = c
		++length

	for (i = 0; i < length; ++i)
		if (input[i] == '/' && input[i + 1] == '/')
			inComment = 1
		else if (input[i] == '/' && input[i + 1] == '*')
			inComment = 1
		else if (input[i] == '\n')
			inComment = 0
		else if (input[i] == '*' && input[i + 1] == '/')
			inComment = 0
			++i
			++i

		if (inComment == 0)
			// opening
			if (input[i] == '(')
				int j = 1
				while ((i + j) != ')' && (i + j) != EOF)
					++j
				if ((i + j) == ')')
					++pairCounter
					input[i] = pairCounter
					input[j] = pairCounter
				else
					imbalanceFound = 1
			else if (input[i] == '[')
				int j = 1
				while ((i + j) != ']' && (i + j) != EOF)
					++j
				if ((i + j) == ']')
					++pairCounter
					input[i] = pairCounter
					input[j] = pairCounter
				else
					imbalanceFound = 1
			else if (input[i] == '{')
				int j = 1
				while ((i + j) != '}' && (i + j) != EOF)
					++j
				if ((i + j) == '}')
					++pairCounter
					input[i] = pairCounter
					input[j] = pairCounter
				else
					imbalanceFound = 1
			// closing
			else if (input[i] == ')' && pairs[i] == 0)
				imbalanceFound = 1
			else if (input[i] == ']' && pairs[i] == 0)
				imbalanceFound = 1
			else if (input[i] == '}' && pairs[i] == 0)
				imbalanceFound = 1
			// quotes
			else if (input[i] == '\'')
				++sQuoteCount
			else if (input[i] == '\"')
				++dQuoteCount

	if (imbalanceFound > 0 || sQuoteCount % 2 = 1 || dQuoteCount % 2 = 1)
		print("Program contains one or more errors.")
	else
		print("Program contains no errors.")